#!/bin/bash

PARAM_1=$1
PARAM_2=$2
PARAM_3=$3
PARAM_4=$4
LOCAL=0
ONE=0
ALL=0
PROJECT=0
CONTAINER_NAME=""
CONTAINER_IMAGE=""
CONTAINER_PORT="83:83"
IMAGE_NAME=""
DOCKER_COMPOSE_FILE="`pwd`/docker-compose.yml"

RCol='\e[0m'
Yel='\e[033m'
Red='\e[031m'
Gre='\e[032m'
Divider='=============================================================='

QUESTION=""
QUESTION_SET_FOLDER=""
SET_DOCKIFY_PROJECT_FOLDER=""

function dockerComposeExist() {
    if [[ -f "$DOCKER_COMPOSE_FILE" ]]; then
        DOCKER_COMPOSE_FILE_EXIST=1
    else
        DOCKER_COMPOSE_FILE_EXIST=0
        echo -e "${Red}Error: Docker compose file not exists ${RCol}\r"
        exit 1
    fi
}

function getParams() {
  for var in "$@"
  do
      if [[ "${var,,}" == "-l" || "${var,,}" == "--local" || "${var,,}" == "local" ]]
      then
        LOCAL=1
      elif [[ "${var,,}" == "-o" || "${var,,}" == "--one" || "${var,,}" == "one" ]]
      then
        ONE=1
      elif [[ "${var,,}" == "-a" || "${var,,}" == "--all" || "${var,,}" == "all" ]]
      then
        ALL=1
      elif [[ "${var,,}" == "y" || "${var,,}" == "yes" ]]
      then
        YES=1
      elif [[ "${var,,}" == "no" || "${var,,}" == "no" ]]
      then
        NO=1
      elif [[ "${var,,}" == "-p" || "${var,,}" == "--project" || "${var,,}" == "project" ]]
      then
        PROJECT=1
      fi
  done
}

case "$PARAM_1" in
   "container:init")
        echo -e "${Gre}"
        echo "Initializing container"
        echo -e "${Divider}\r"

        getParams "$@"

        if [[ "${LOCAL}" == 1 ]]
        then
            dockerComposeExist
            docker-compose up -d
        elif [[ "${ONE}" == 1 ]]
        then
            dockerComposeExist
            echo -e "${Yel}Containers running \r${Divider}\r${RCol}"
            docker container ls -a
            echo -e "${Yel}Available containers \r${Divider}\r${RCol}"
            docker-compose config --services
            echo -e "${Gre}Which one? :  ${RCol}\r"
            read CONTAINER_NAME
            docker-compose up -d ${CONTAINER_NAME}
        elif [[ "${PROJECT}" == 1 ]]
        then
            cd $DOCKIFY_PROJECT_FOLDER
            eval "${DOCKIFY_FOLDER}/./container"
        fi
        echo -e "${RCol}"
   ;;
   "container:start")
        echo -e "${Yel}"
        echo "Starting ${PARAM_2}"
        echo -e "${Divider}${RCol}"

        if [[ "${LOCAL}" == 1 ]]
        then
            docker start $PARAM_2
        elif [[ "${ALL}" == 1 ]]
        then
            dockerComposeExist
            docker-compose up -d
        elif [[ "${ONE}" == 1 ]]
        then
            dockerComposeExist
            docker container ls -a
            echo -e "${Gre}Which one? :  ${RCol}\r"
            read CONTAINER_NAME
            docker-compose up -d ${CONTAINER_NAME}
        elif [[ "${PROJECT}" == 1 ]]
        then
            cd $DOCKIFY_PROJECT_FOLDER
            dockerComposeExist
            docker-compose up -d ${PARAM_2}
        fi
   ;;
   "container:stop")
        echo -e "${Yel}"
        echo "Stop container"
        echo -e "${Divider}${RCol}"

        getParams "$@"

        if [[ "${ALL}" == 1 ]]
        then
            docker stop $(docker ps -a -q)
        elif [[ "${LOCAL}" == 1 ]]
        then
            docker stop $PARAM_2
        elif [[ "${ONE}" == 1 ]]
        then
            dockerComposeExist
            echo -e "${Yel}Containers running${RCol}\r"
            echo -e "${Yel}${Divider}${RCol}"
            docker container ls
            echo -e "${Yel}Available containers${RCol}\r"
            echo -e "${Yel}${Divider}${RCol}"
            docker-compose config --services
            echo -e "${Gre}Which one? :  ${RCol}\r"
            read CONTAINER_NAME
            docker-compose stop ${CONTAINER_NAME}
        elif [[ "${PROJECT}" == 1 ]]
        then
            cd $DOCKIFY_PROJECT_FOLDER
            dockerComposeExist
            docker-compose stop ${PARAM_2}
        fi
   ;;
   "container:create")
        echo -e "${Yel}Please write a name for the container :  ${RCol}\r"
        read CONTAINER_NAME
        echo -e "${Yel}Please set a port for the container (DEFAULT is 83:83) :  ${RCol}\r"
        read CONTAINER_PORT
        echo -e "${Yel}Please set the image from where create the container :  ${RCol}\r"
        read CONTAINER_IMAGE
        echo -e "${Yel}Starting process, please wait to finish ${Divider}${RCol}\r"
        docker run -d --name=${CONTAINER_NAME} -p ${CONTAINER_PORT} ${CONTAINER_IMAGE}
        echo -e "${Gre} Process finish  ${RCol}\r"
        exit 1
   ;;
   "container:remove")
        echo -e "${Yel}Removing container${RCol}"
        echo -e "${Divider}${RCol}"

        getParams "$@"

        if [[ "${LOCAL}" == 1 ]]
        then
            dockerComposeExist
            docker-compose down
        elif [[ "${ONE}" == 1 ]]
        then
            dockerComposeExist
            docker container ls -a
            echo -e ${RCol}
            echo -e "${Gre}Which one? :  ${RCol}\r"
            read CONTAINER_NAME
            docker container stop "${CONTAINER_NAME}"
            docker container rm -f "${CONTAINER_NAME}"
        elif [[ "${ALL}" == 1 ]]
        then
            docker stop $(docker ps -a -q)
            docker rm $(docker ps -a -q)
        else
            echo "Need more params"
        fi
   ;;
   "container:list")
        getParams "$@"

        dockerComposeExist
        if [[ "${LOCAL}" == 1 ]]
        then
            docker-compose config --services
        elif [[ "${ALL}" == 1 ]]
        then
            docker container list -a
        fi
   ;;
   "image:list")
        getParams "$@"

        dockerComposeExist
        if [[ "${LOCAL}" == 1 ]]
        then
            docker-compose config --services
        elif [[ "${ALL}" == 1 ]]
        then
            docker image list -a
        fi
   ;;
   "image:remove")
        echo -e "${Yel}"
        echo "Removing all images"
        echo -e "${Divider}${RCol}"

        getParams "$@"

        if [[ "${LOCAL}" == 1 ]]
        then
            dockerComposeExist
            docker-compose down --rmi local
        elif [[ "${ONE}" == 1 ]]
        then
            docker image ls
            echo -e "${Gre}Which one? :  ${RCol}\r"
            read IMAGE_NAME
            docker image rm ${IMAGE_NAME}
         elif [[ "${ALL}" == 1 ]]
         then
            dockerComposeExist
            # Stop all containers
            docker stop $(docker ps -a -q)
            # Remove all containers
            docker rm $(docker ps -a -q)
            # Remove all images
            docker rmi $(docker images -a -q)
        fi
        echo -e "${RCol}"
   ;;
   "image:pull")
       echo -e "${Yel}"
       echo "Pulling images"
       echo -e "${Divider}${RCol}"

       getParams "$@"

       if [[ "${LOCAL}" == 1 ]]
       then
            dockerComposeExist
            docker-compose up -d
       elif [[ "${ONE}" == 1 ]]
       then
            dockerComposeExist
            echo -e "${Yel}"
            docker-compose config --services
            echo -e " ${RCol}\r"
            echo -e "${Gre}Which one? :  ${RCol}\r"
            read QUESTION
            docker-compose up -d ${QUESTION}
       elif [[ "${PROJECT}" == 1 ]]
       then
            eval "${DOCKIFY_FOLDER}/./container"
       fi
   ;;
   "project:folder:set")
        echo -e "${Yel} You want set the project folder? [y/N]:  ${RCol}\r"
        read QUESTION_SET_FOLDER
        QUESTION_SET_FOLDER="${QUESTION_SET_FOLDER,,}"

        if [[ ${QUESTION_SET_FOLDER} = "y" || ${QUESTION_SET_FOLDER} = "yes" ]]
            then
            echo -e "${Yel} Write the project folder:  ${RCol}\r"
            read SET_DOCKIFY_PROJECT_FOLDER
            SET_DOCKIFY_PROJECT_FOLDER="${SET_DOCKIFY_PROJECT_FOLDER,,}"

            if [[ "${SET_DOCKIFY_PROJECT_FOLDER}" != "" ]]
                then
                sed -i 's/export DOCKIFY_PROJECT_FOLDER.*//g' ~/.bashrc
                echo "export DOCKIFY_PROJECT_FOLDER='${SET_DOCKIFY_PROJECT_FOLDER}'" >> ~/.bashrc
                eval "source ~/.bashrc"
                echo -e "${Yel} Success!  ${RCol}\r"
            fi
        fi
   ;;
   "list")
       echo -e "${Gre}"
       echo -e "Docker Simplifier\r"
       echo -e "${RCol}"
       echo -e "${Divider}\r"
       echo -e "${Yel}"
       echo -e "COMMAND\t\t\t\tDESCRIPTION\n"
       echo -e "container:remove\t\tStop and remove all containers\r"
       echo -e "container:init\t\t\tInitialize all containers\r"
       echo -e "container:start\t\t\tStart one container by name\r"
       echo -e "container:stop\t\t\tStop container by name\r"
       echo -e "images:remove\t\t\tRemove all images\r"
       echo -e "images:pull\t\t\tPull all images from dockerhub and registry gitlab\r"
       echo -e "network:list\r"
       echo -e "network:create\r"
       echo -e "network:remove\r"
       echo -e "volume:list\r"
       echo -e "volume:create\r"
       echo -e "volume:remove\r"
       echo -e "login\r"
       echo -e "${RCol}"
   ;;
   "check-install")
        echo "Installation successfull, good work"
   ;;
   "network:list")
        docker network ls
   ;;
   "network:create")
        echo -e "${Yel}"
        echo "Creating network"
        echo -e "${Divider}"
        docker network create $PARAM_2
        echo -e "${RCol}"
   ;;
   "network:remove")
        echo -e "${Yel}"
        echo "Creating network"
        echo -e "${Divider}"
        docker network rm $PARAM_2
        echo -e "${RCol}"
   ;;
   "volume:list")
        docker volume ls
   ;;
   "volume:create")
        echo -e "${Yel}"
        echo "Creating volumen"
        echo -e "${Divider}"
        docker volume create --name=$PARAM_2
        echo -e "${RCol}"
   ;;
   "volume:remove")
        echo -e "${Yel}"
        echo "Removing volumen"
        echo -e "${Divider}"

        getParams "$@"

        if [[ "${ALL}" == 1 ]]
        then
            docker volume rm $(docker volume ls -q)
        elif [[ "${ONE}" == 1 ]]
        then
            docker volume rm $PARAM_2
        else
            echo -e "\e[7mYou must set a valid volume, these are available\e[0m"
            docker volume ls -q
        fi
        echo -e "${RCol}"
   ;;
   "login")
        DOCKER_USERNAME=""
        DOCKER_PASSWORD=""
         echo -e "${Gre}Username:  ${RCol}: ${Yel}"
         read USERNAME
         echo -e "${RCol}"
         echo -e "${Gre}Password:  ${RCol}: ${Yel}"
         read DOCKER_PASSWORD
         echo -e "${RCol}"
         echo -e "${Gre}Log in Docker  ${RCol}\r"
         docker login --username=${DOCKER_USERNAME} --password=${DOCKER_PASSWORD}
   ;;
  "params")
    getParams "$@"
    echo $SOLO
  ;;
   *)
    echo -e "${Red}I don't know what to do${RCol}"
    ;;
esac

exit 1
