#!/bin/bash

PARAM_1=$1
PARAM_2=$2
PARAM_3=$3
PARAM_4=$4
LOCAL=0
ONE=0
ALL=0
PROJECT=0
TIME="time"
ID="id"
CUSTOM_FILE=0
filename=""
CONTAINER_NAME=""
CONTAINER_IMAGE=""
CONTAINER_PORT="83:83"
IMAGE_NAME=""
DOCKER_COMPOSE_FILE="`pwd`/docker-compose.yml"

RCol='\e[0m'
Yel='\e[033m'
Red='\e[031m'
Gre='\e[032m'
Divider='=============================================================='

QUESTION=""
QUESTION_SET_FOLDER=""
SET_DOCKIFY_PROJECT_FOLDER=""

function dockerComposeExist() {
    if [[ -f "$DOCKER_COMPOSE_FILE" ]]; then
        DOCKER_COMPOSE_FILE_EXIST=1
    else
        DOCKER_COMPOSE_FILE_EXIST=0
        echo -e "${Red}Error: Docker compose file not exists ${RCol}\r"
        exit 1
    fi
}

function dockerFileExist() {
    local __resultvar=$1
    local FILE="`pwd`/Dockerfile"

    if [[ -f "$FILE" ]]
    then
        echo 1
    else
        echo 0
    fi
}

usage() {
    echo -e "${Gre}"
       echo -e "Docker Simplifier${RCol}\r"
       echo -e "${Divider}${RCol}\r"
       echo -e "${Yel}"
       echo -e "COMMAND\t\t\t\tDESCRIPTION\n"
       echo -e "container:create\t\tCreate a new container\r"
       echo -e "container:init\t\t\tInitialize one or all containers\r"
       echo -e "container:list\t\t\tList all container\r"
       echo -e "container:logs\t\t\tSee container log by container\r"
       echo -e "container:remove\t\tStop and remove one or all containers\r"
       echo -e "container:start\t\t\tStart one container by name\r"
       echo -e "container:stop\t\t\tStop container one by name or all\r"
       echo -e "image:build\t\t\tCreate a new image\r"
       echo -e "image:remove\t\t\tRemove all images\r"
       echo -e "image:list\t\t\tList all images installed\r"
       echo -e "image:push\t\t\tPush images to repository\r"
       echo -e "image:pull\t\t\tPull all images from dockerhub and registry gitlab\r"
       echo -e "project:folder:set\r"
       echo -e "network:list\t\t\tList network\r"
       echo -e "network:create\t\t\tCreate a network\r"
       echo -e "network:remove\t\t\tRemove network\r"
       echo -e "volume:list\t\t\tList volumes\r"
       echo -e "volume:create\t\t\tCreate a volume\r"
       echo -e "volume:remove\t\t\tRemove volume\r"
       echo -e "login\t\t\t\tLogin to repository\r"
       echo -e "clean\t\t\t\tPrune docker\r"
       echo -e "terminal\t\t\tOpen container terminal\r"
       echo -e "${RCol}"
}

getParams() {
    for var in "$@"
    do
        case "${var,,}" in
            -f | --file )   shift
                            CUSTOM_FILE=1
                            filename=" -f ${1} "
            ;;
            -l | --local ) LOCAL=1
            ;;
            -o | --one ) ONE=1
            ;;
            -a | --all ) ALL=1
            ;;
            -y | --yes ) YES=1
            ;;
            -n | --no ) NO=1
            ;;
            -p | --project ) PROJECT=1
             ;;
            -h | --help ) usage
                exit
            ;;
            * )
        esac
        shift
    done
}

case "$PARAM_1" in
   "container:init")
        echo -e "${Gre}"
        echo "Initializing container"
        echo -e "${Divider}${RCol}"

        getParams "$@"

        if [[ "${ALL}" == 1 ]]
        then
            if [[ "${CUSTOM_FILE}" == 0 ]]
            then
                dockerComposeExist
            fi

            docker-compose ${filename} up -d
        elif [[ "${ONE}" == 1 ]]
        then
            if [[ "${CUSTOM_FILE}" == 0 ]]
            then
                dockerComposeExist
            fi

            echo -e "${Yel}Containers running${RCol}\r"
            echo -e "${Yel}${Divider}${RCol}"
            docker container ls
            echo -e "${Yel}Available containers${RCol}\r"
            echo -e "${Yel}${Divider}${RCol}"
            docker-compose ${filename} config --services
            echo -e "${Gre}Which one? :  ${RCol}\r"
            read CONTAINER_NAME
            docker-compose ${filename} up -d ${CONTAINER_NAME}
        elif [[ "${PROJECT}" == 1 ]]
        then
            cd $DOCKIFY_PROJECT_FOLDER

            if [[ "${CUSTOM_FILE}" == 0 ]]
            then
                dockerComposeExist
            fi

            eval "${DOCKIFY_FOLDER}/./container"
        fi
   ;;
   "container:stop")
        echo -e "${Yel}"
        echo "Stop container all container"
        echo -e "${Divider}${RCol}"

        getParams "$@"

        if [[ "${ALL}" == 1 ]]
        then
            docker ${filename} stop $(docker ps -a -q)
        elif [[ "${LOCAL}" == 1 ]]
        then
            docker stop $PARAM_2
        elif [[ "${ONE}" == 1 ]]
        then
            if [[ "${CUSTOM_FILE}" == 0 ]]
            then
                dockerComposeExist
            fi

            echo -e "${Yel}Containers running${RCol}\r"
            echo -e "${Yel}${Divider}${RCol}"
            docker container ls
            echo -e "${Yel}Available containers${RCol}\r"
            echo -e "${Yel}${Divider}${RCol}"
            docker-compose ${filename} config --services
            echo -e "${Gre}Which one? :  ${RCol}\r"
            read CONTAINER_NAME
            docker-compose ${filename} stop ${CONTAINER_NAME}
        elif [[ "${PROJECT}" == 1 ]]
        then
            cd $DOCKIFY_PROJECT_FOLDER
            if [[ "${CUSTOM_FILE}" == 0 ]]
            then
                dockerComposeExist
            fi
            docker-compose ${filename} stop ${PARAM_2}
        fi
   ;;
   "container:logs")
        if [[ "${PROJECT}" == 1 ]]
        then
            cd $DOCKIFY_PROJECT_FOLDER
        fi

        if [[ "${CUSTOM_FILE}" == 0 ]]
        then
            dockerComposeExist
        fi
        echo -e "${Yel}Containers running${RCol}\r"
        echo -e "${Yel}${Divider}${RCol}"
        docker container ls
        echo -e "${Gre}Which one? :  ${RCol}\r"
        read CONTAINER_NAME
        docker logs -f ${CONTAINER_NAME}
   ;;
   "container:create")
        echo -e "${Yel}Please write a name for the container :  ${RCol}\r"
        read CONTAINER_NAME
        echo -e "${Yel}Please set a port for the container (DEFAULT is 83:83) :  ${RCol}\r"
        read CONTAINER_PORT
        echo -e "${Yel}Please set the image from where create the container :  ${RCol}\r"
        read CONTAINER_IMAGE
        echo -e "${Yel}Starting process, please wait to finish ${Divider}${RCol}\r"
        docker run -d --name=${CONTAINER_NAME} -p ${CONTAINER_PORT} ${CONTAINER_IMAGE}
        echo -e "${Gre} Process finish  ${RCol}\r"
   ;;
   "container:remove")
        echo -e "${Yel}"
        echo "Removing container"
        echo -e "${Divider}${RCol}"

        getParams "$@"

        if [[ "${LOCAL}" == 1 ]]
        then
            if [[ "${CUSTOM_FILE}" == 0 ]]
            then
                dockerComposeExist
            fi
            docker-compose ${filename} down
        elif [[ "${ONE}" == 1 ]]
        then
            if [[ "${CUSTOM_FILE}" == 0 ]]
            then
                dockerComposeExist
            fi
            docker container ls -a
            echo -e "${Gre}Which one? :  ${RCol}\r"
            read CONTAINER_NAME
            docker container stop "${CONTAINER_NAME}"
            docker container rm -f "${CONTAINER_NAME}"
        elif [[ "${ALL}" == 1 ]]
        then
            docker stop $(docker y imaps -a -q)
            docker rm $(docker ps -a -q)
        else
            echo "Need more params"
        fi
   ;;
   "container:list")
        getParams "$@"

        if [[ "${CUSTOM_FILE}" == 0 ]]
        then
            dockerComposeExist
        fi

        if [[ "${LOCAL}" == 1 ]]
        then
            docker-compose ${filename} config --services
        elif [[ "${ALL}" == 1 ]]
        then
            docker container list -a
        fi
   ;;
   "image:build")
        echo -e "${Yel}"
        echo "Build image ${PARAM_2}"
        echo -e "${Divider}${RCol}\r"
        CHECK=$(dockerFileExist)

        if [[ "${CHECK}" == 1 ]]
        then
          echo -e "${Gre}Tag for image :  ${RCol}\r"
          read IMAGE_NAME
          docker build -t "${IMAGE_NAME}" .
        fi
   ;;
   "image:list")
        getParams "$@"

        if [[ "${CUSTOM_FILE}" == 0 ]]
        then
            dockerComposeExist
        fi

        if [[ "${LOCAL}" == 1 ]]
        then
            docker-compose ${filename} config --services
        elif [[ "${ALL}" == 1 ]]
        then
            docker image list
        fi
   ;;
   "image:remove")
        echo -e "${Yel}"
        echo "Removing all images"
        echo -e "${Divider}${RCol}"

        getParams "$@"

        if [[ "${LOCAL}" == 1 ]]
        then
            if [[ "${CUSTOM_FILE}" == 0 ]]
            then
                dockerComposeExist
            fi

            docker-compose ${filename} down --rmi local
        elif [[ "${ONE}" == 1 ]]
        then
            docker image ls
            echo -e "${Gre}Which one? :  ${RCol}\r"
            read IMAGE_NAME
            docker image rm ${IMAGE_NAME}
         elif [[ "${ALL}" == 1 ]]
         then
            if [[ "${CUSTOM_FILE}" == 0 ]]
            then
                dockerComposeExist
            fi

            # Stop all containers
            docker stop $(docker ps -a -q)
            # Remove all containers
            docker rm $(docker ps -a -q)
            # Remove all images
            docker rmi $(docker images -a -q)
        fi
        echo -e "${RCol}"
   ;;
   "image:push")
       echo -e "${Yel}"
       echo "Pushing images"
       echo -e "${Divider}${RCol}"
       docker images
       echo -e "${Gre}Which one? :  ${RCol}\r"
       read IMAGE_NAME
       docker push ${IMAGE_NAME}
   ;;
   "image:pull")
       echo -e "${Yel}"
       echo "Pulling images"
       echo -e "${Divider}${RCol}"

       getParams "$@"

       if [[ "${ALL}" == 1 ]]
       then
            if [[ "${CUSTOM_FILE}" == 0 ]]
            then
                dockerComposeExist
            fi

            docker-compose ${filename} up -d
       elif [[ "${ONE}" == 1 ]]
       then
            if [[ "${CUSTOM_FILE}" == 0 ]]
            then
                dockerComposeExist
            fi
            docker-compose ${filename} config --services
            echo -e "${Gre}Which? :  ${RCol}\r"
            read QUESTION
            docker-compose pull ${QUESTION}
       elif [[ "${PROJECT}" == 1 ]]
       then
            cd $DOCKIFY_PROJECT_FOLDER
            if [[ "${CUSTOM_FILE}" == 0 ]]
            then
                dockerComposeExist
            fi

            eval "${DOCKIFY_FOLDER}/./container"
       fi
   ;;
   "project:folder:set")
        echo -e "${Yel} You want set the project folder? [y/N]:  ${RCol}\r"
        read QUESTION_SET_FOLDER
        QUESTION_SET_FOLDER="${QUESTION_SET_FOLDER,,}"

        if [[ ${QUESTION_SET_FOLDER} = "y" || ${QUESTION_SET_FOLDER} = "yes" ]]
            then
            echo -e "${Yel} Write the project folder:  ${RCol}\r"
            read SET_DOCKIFY_PROJECT_FOLDER
            SET_DOCKIFY_PROJECT_FOLDER="${SET_DOCKIFY_PROJECT_FOLDER,,}"

            if [[ "${SET_DOCKIFY_PROJECT_FOLDER}" != "" ]]
                then
                sed -i 's/export DOCKIFY_PROJECT_FOLDER.*//g' ~/.bashrc
                echo "export DOCKIFY_PROJECT_FOLDER='${SET_DOCKIFY_PROJECT_FOLDER}'" >> ~/.bashrc
                eval "source ~/.bashrc"
                echo -e "${Yel} Success!  ${RCol}\r"
            fi
        fi
   ;;
   "list")
       usage
   ;;
   "check-install")
        echo "Installation successfull, good work"
   ;;
   "network:list")
        docker network ls
   ;;
   "network:create")
        echo -e "${Yel}"
        echo "Creating network"
        echo -e "${Divider}"
        docker network create $PARAM_2
        echo -e "${RCol}"
   ;;
   "network:remove")
        echo -e "${Yel}"
        echo "Creating network"
        echo -e "${Divider}"
        docker network rm $PARAM_2
        echo -e "${RCol}"
   ;;
   "volume:list")
        docker volume ls
   ;;
   "volume:create")
        echo -e "${Yel}"
        echo "Creating volumen"
        echo -e "${Divider}"
        docker volume create --name=$PARAM_2
        echo -e "${RCol}"
   ;;
   "volume:remove")
        echo -e "${Yel}"
        echo "Removing volumen"
        echo -e "${Divider}"

        getParams "$@"

        if [[ "${ALL}" == 1 ]]
        then
            docker volume rm $(docker volume ls -q)
        elif [[ "${ONE}" == 1 ]]
        then
            docker volume rm $PARAM_2
        else
            echo -e "\e[7mYou must set a valid volume, these are available\e[0m"
            docker volume ls -q
        fi
        echo -e "${RCol}"
   ;;
   "login")
        DOCKER_USERNAME=""
        DOCKER_PASSWORD=""
         echo -e "${Gre}Username:  ${RCol}: ${Yel}"
         read USERNAME
         echo -e "${RCol}"
         echo -e "${Gre}Password:  ${RCol}: ${Yel}"
         read DOCKER_PASSWORD
         echo -e "${RCol}"
         echo -e "${Gre}Log in Docker  ${RCol}\r"
         docker login --username=${DOCKER_USERNAME} --password=${DOCKER_PASSWORD}
   ;;
   "clean")
        docker system prune
   ;;
   "info")
        docker info | grep -i root
   ;;
   "terminal")
        echo -e "${Yel}"
        echo "Containers running"
        echo -e "${Divider}${RCol}"
        docker ps
        echo -e "${Gre}Which one? :  ${RCol}\r"
        read QUESTION

        if [[ "${QUESTION}" == "" ]]
        then
            echo -e "${Red}You need set a valid container ID  ${RCol}\r"
            exit 2
        fi
        docker exec -it "${QUESTION}" bash
   ;;
   "params")
        getParams "$@"
        echo $SOLO
  ;;
   *)
    echo -e "${Red}I don't know what to do${RCol}"
    ;;
esac

exit 1
